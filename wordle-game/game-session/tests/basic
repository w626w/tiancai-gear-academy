#[cfg(test)]
mod tests {
    use super::*;
    use gstd::{prelude::*, msg, ActorId};
    use gtest::{Program, System};
    use game_session_io::*;

    const WORDLE_ID: u64 = 1;
    const GAME_SESSION_ID: u64 = 2;
    const USER1: u64 = 10;

    fn setup() -> System {
        let sys = System::new();
        sys.init_logger();

        let wordle = Program::from_file(&sys, "../target/wasm32-unknown-unknown/debug/wordle.wasm");
        let game_session = Program::from_file(
            &sys,
            "../target/wasm32-unknown-unknown/debug/game_session.wasm",
        );

        // 将USER的ActorId和Wordle程序ID关联并发送消息
        let user_id: ActorId = USER1.into();
        let wordle_id: ActorId = WORDLE_ID.into();
        assert!(!wordle.send(user_id, wordle_id).main_failed());
        assert!(!game_session.send(user_id, wordle_id).main_failed());

        sys 
    }

    #[test]
    fn test_start_check_win_game() {
        let sys = setup(); // 初始化系统
        let game_session = sys.get_program(GAME_SESSION_ID).unwrap();

        // 读取状态以验证游戏是否已启动
        let state: GameSession = game_session.read_state(()).unwrap();
        assert!(!game_session.send(USER1, Action::StartGame).main_failed());

        assert!(!game_session.send(USER1, Action::CheckWord { word: "hello".to_string() }).main_failed());

        assert!(!game_session.send(USER1, Action::CheckWord { word: "house".to_string() }).main_failed());

        println!("State after CheckWord (house): {:?}", state);

        let state: GameSession = game_session.read_state(()).unwrap();
        assert!(state.games.iter().any(|game| game.user == USER1.into() && game.attempts == 2));
    }


#[test]
fn test_lose_game() {
    let sys = setup(); // 初始化系统
    let game_session = sys.get_program(GAME_SESSION_ID).unwrap();

    // 读取状态以验证游戏是否已启动
    assert!(!game_session.send(USER1, Action::StartGame).main_failed());
    assert!(!game_session.send(USER1, Action::CheckWord { word: "hello".to_string() }).main_failed());
    assert!(!game_session.send(USER1, Action::CheckWord { word: "hello".to_string() }).main_failed());
    assert!(!game_session.send(USER1, Action::CheckWord { word: "hello".to_string() }).main_failed());
    assert!(!game_session.send(USER1, Action::CheckWord { word: "hello".to_string() }).main_failed());
    assert!(!game_session.send(USER1, Action::CheckWord { word: "hello".to_string() }).main_failed());
    assert!(!game_session.send(USER1, Action::CheckWord { word: "hello".to_string() }).main_failed());
    assert!(!game_session.send(USER1, Action::CheckWord { word: "house".to_string() }).main_failed());


    let state: GameSession = game_session.read_state(()).unwrap();
    assert!(state.games.iter().any(|game| game.user == USER1.into() && game.attempts == 6));
}


    #[test]
    fn test_check_game_status() {
        let sys = setup(); // 初始化系统
        let game_session = sys.get_program(GAME_SESSION_ID).unwrap();
        assert!(!game_session.send(USER1, Action::StartGame).main_failed());
        let state: GameSession = game_session.read_state(()).unwrap();
        assert!(state.games.iter().any(|game| game.user == USER1.into()));
        println!("State after CheckWord (house): {:?}", state);

        sys.spend_blocks(10);
        //时间过了之后无法进行操作
        // assert!(!game_session.send(USER1, Action::CheckWord { word: "hello".to_string() }).main_failed());
        // assert!(!game_session.send(USER1, Action::CheckWord { word: "hello".to_string() }).main_failed());

        let state: GameSession = game_session.read_state(()).unwrap();
        println!("timeout: {:?}", state);

        //assert!(state.games.iter().any(|game| game.user == USER1.into()));

    }
}

